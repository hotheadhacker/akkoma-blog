[
  {
    "id": "a59352af-47ed-4b15-908c-9d0845e9f316",
    "title": "Stop Obsessing Over Scalability Before You Have a Product  One of the strangest trends I’ve seen ...",
    "date": "2025-05-09T10:05:40.733Z",
    "content": "Stop Obsessing Over Scalability Before You Have a Product<br /><br />One of the strangest trends I’ve seen in the DevOps and startup world lately is how early teams rush to architect their projects for massive scale — before they’ve even validated their core product. Everyone seems obsessed with building for “millions of users” from day one, yet most of these products don’t survive long enough to reach even 100.<br /><br />I’ve been in DevOps for over four years now, and here’s what I’ve learned:<br />Everything is scalable.<br />Given the time, resources, and intent, any system can scale. Sure, some require more engineering effort, but it’s doable — it always is. But what’s not as easily fixable is a poorly thought-out product, a missing market fit, or a startup that ran out of steam because it spent all its energy on infrastructure gymnastics instead of value creation.<br /><br />I’ve seen so many projects set up from day one with:<br />\t•\tMicroservices (without needing services in the first place),<br />\t•\tKubernetes clusters (when they barely need one server),<br />\t•\tKafka queues,<br />\t•\tRedis clusters,<br />\t•\tFull-blown observability stacks like Prometheus, Grafana, Loki, the whole suite,<br />\t•\tAnd CI/CD pipelines with dozens of automated checks and staged deployments.<br /><br />Meanwhile… their product isn’t even live. Or worse — it’s live, but no one’s using it.<br /><br />Scalability has become a vanity metric in the builder’s mind. Something to show off. Something to prove that they’re serious about tech. But it’s like building a ten-lane highway in the desert. Where are the cars?<br /><br />Why are we doing this?<br /><br />Because we’re letting fear and future-hypotheticals override logic:<br />\t•\t“What if we blow up overnight?”<br />\t•\t“What if TechCrunch features us tomorrow?”<br />\t•\t“What if 10,000 people sign up in the first week?”<br /><br />None of that matters if your product can’t keep even one person engaged.<br /><br />Here’s the honest truth:<br /><br />You can scale almost anything when needed — but you can’t inject product-market fit after you’ve exhausted your budget and energy on premature infra scaling.<br /><br />What’s the better approach?<br />\t•\tBuild a solid, minimal product.<br />\t•\tGet it working on a basic setup. A single server, even.<br />\t•\tKeep your code readable and modular. That’s your best “scalability plan” right there.<br />\t•\tMaintain a rough SOP or checklist for scaling later. Know how you would scale when needed — but don’t build it yet.<br />\t•\tTrack real usage. Then decide when to scale based on demand, not on your architecture fantasy.<br /><br />And I get it — it feels good to build fancy infra. It makes you feel like a real engineer. But building the right thing, with the right focus, is even harder — and that’s what separates successful products from the graveyard of over-engineered ghosts.<br /><br />So stop chasing scale before you’ve solved a problem.<br />Build value first. Scale later.<br /><br />⸻<br /><a href=\"https://social.isalman.dev/tag/oplog\">#OpLog</a> - Day 4",
    "excerpt": "...",
    "url": "/posts/a59352af-47ed-4b15-908c-9d0845e9f316/",
    "originalUrl": "https://social.isalman.dev/objects/a59352af-47ed-4b15-908c-9d0845e9f316"
  },
  {
    "id": "b764990c-ccea-4b2a-a09a-f91c64e8145b",
    "title": "A well-crafted README &gt; any fancy landing page.    Markdown is the new minimal web — clean, st...",
    "date": "2025-05-08T08:23:58.281Z",
    "content": "A well-crafted README &gt; any fancy landing page.  <br /><br />Markdown is the new minimal web — clean, structured, and privacy-friendly.  <br /><br />GitHub READMEs (even profile READMEs) serve as reliable, fast-loading, no-tracking intros to your work.  <br />No scripts, no trackers, no third-party callouts leaking your IP.  <br /><br />You get formatting, links, badges, and even basic analytics — without writing a line of frontend.  <br /><br />Whether for personal or company branding, don't underestimate a good README.  <br />It's trustable, portable, and just works.<br /><br />---<br /><br /><a href=\"https://social.isalman.dev/tag/oplog\">#OpLog</a> -Day3",
    "excerpt": "...",
    "url": "/posts/b764990c-ccea-4b2a-a09a-f91c64e8145b/",
    "originalUrl": "https://social.isalman.dev/objects/b764990c-ccea-4b2a-a09a-f91c64e8145b"
  },
  {
    "id": "c61e414f-578f-48e4-a782-4e0826008321",
    "title": "We’re Severely Underestimating Docker Vulnerabilities — And It Might Burn Us AllDocker changed ho...",
    "date": "2025-05-07T14:50:42.706Z",
    "content": "We’re Severely Underestimating Docker Vulnerabilities — And It Might Burn Us All<p>Docker changed how we build and ship software. It gave developers the power to package everything into portable containers. But somewhere along the way, we’ve become <em>too comfortable</em>, too trusting of images, and too careless with commands like <code>docker build</code> and <code>docker exec</code>.</p><p>Let’s talk about the security mess we’re <em>not</em> discussing enough.</p><hr />The Illusion of Isolation<p>Containers are often mistaken for lightweight VMs. But they’re not. Docker uses the host kernel, and unless configured carefully, a malicious container can access far more than intended.</p><p>Commands like <code>docker exec</code> drop you into a container. Useful, yes — but also risky. Any script or automation using it might interact with host resources or expose sensitive files unintentionally.</p><hr />The Real Risk of <code>docker build</code><p><code>docker build</code> is an overlooked attack vector. It:</p><ul><li>Takes a <code>Dockerfile</code></li><li>Executes each instruction <em>as root</em></li><li>Often pulls base images from public registries</li></ul><p>Now imagine this:</p><p>You clone a random GitHub repo, run <code>docker build .</code>, and boom — you’ve executed arbitrary root-level instructions. No warnings. Just blind trust.</p><hr />Real-World Case: Docker Hub Malware<p>In 2021, over <strong>30 malicious Docker images</strong> were found on Docker Hub. They had been downloaded <strong>millions of times</strong> and were used to:</p><ul><li>Mine crypto  </li><li>Leak secrets  </li><li>Create backdoors  </li></ul><p>These weren’t obscure projects. They had names like <code>alpine-nginx</code> or <code>ubuntu-node</code>, making them easy to mistake for safe options.</p><hr />Dockerfile Hell<p>Many Dockerfiles reference scripts like:</p><pre><code>RUN curl <a href=\"https://example.com/script.sh\">https://example.com/script.sh</a> | bash\n</code></pre><p>Or clone unknown repos. This adds <strong>layers of trust issues</strong>.</p><p>Once a payload hides in one of these layers, it can:</p><ul><li>Hijack your SSH keys  </li><li>Drop persistent malware  </li><li>Leak credentials from ENV variables  </li></ul><hr /><code>docker exec</code> Gone Wrong<p>Running <code>docker exec</code> feels harmless. It’s just for debugging, right?</p><p>But when used poorly — especially in scripts — it can:</p><ul><li>Expose a shell with elevated privileges  </li><li>Access sensitive files  </li><li>Leave behind credentials or temp files  </li></ul><p>If someone gains access to that container, it’s a full gateway into your environment.</p><hr />Root Problem: Blind Trust<p>The issue isn’t Docker itself. It’s how casually we use it:</p><ul><li>Pulling random images  </li><li>Building unverified repos  </li><li>Mounting host volumes  </li><li>Allowing <code>docker.sock</code> access (aka root access to Docker)</li></ul><p>It’s not a Docker flaw. It’s a human flaw.</p><hr />Staying Safe: Practical Tips<p>We <em>can</em> do better. Here’s how:</p>1. Trust base images only from verified sources<ul><li>Use pinned versions (<code>alpine:3.18</code>, not <code>latest</code>)</li><li>Prefer official images</li><li>Scan with tools like <a href=\"https://github.com/aquasecurity/trivy\">Trivy</a></li></ul>2. Audit every Dockerfile you use<ul><li>Watch for suspicious URLs or commands</li><li><p>Avoid <code>curl | bash</code> patterns</p></li></ul>3. Don’t mount Docker socket<ul><li>It gives containers full control</li><li>If required, restrict access or set to read-only</li></ul>4. Avoid running as root<ul><li>Use <code>USER</code> directive</li><li>Drop capabilities with <code>--cap-drop=ALL</code></li></ul>5. Monitor and rescan regularly<ul><li>Docker scan tools help  </li><li>Periodic rebuilds ensure old exploits don’t linger</li></ul><hr />Let’s Be Real<p>We got used to Docker making life easy. But ease brought ignorance. People assume containers are safe just because they’re isolated. But attackers love Docker — especially when misused.</p><p>Next time you run <code>docker build</code> or <code>docker exec</code>, ask yourself:</p><p><em>Do I know what this image is doing?</em></p><p>Because if it breaks out, it’s not <em>just</em> a container anymore.</p><p><strong><a href=\"https://social.isalman.dev/tag/oplog\">#OpLog</a> — Special Drop</strong></p>",
    "excerpt": "Docker changed how we build and ship software. It gave developers the power to package everything into portable containers. But somewhere along the way, we’ve become too comfortable, too trusting of i...",
    "url": "/posts/c61e414f-578f-48e4-a782-4e0826008321/",
    "originalUrl": "https://social.isalman.dev/objects/c61e414f-578f-48e4-a782-4e0826008321"
  },
  {
    "id": "898fb860-7c0a-4899-89aa-6cfb0301db4e",
    "title": "Open-source is becoming a buzzword trap.  Take VS Code — open source in repo, but the binaries yo...",
    "date": "2025-05-07T05:25:16.256Z",
    "content": "Open-source is becoming a buzzword trap.<br /><br />Take VS Code — open source in repo, but the binaries you download? Full of telemetry. Not open at all.<br /><br />Then there’s Postiz — “self-hostable” social scheduling tool. The FOSS version is barely usable. It pushes you hard to upgrade… to something more expensive than closed-source rivals. And now they’re flirting with crypto tokens?<br /><br />Even AppFlowy, marketed as a Notion alternative, barely delivers.<br /><br />Being open-source shouldn’t mean bait-and-switch.<br /><br /><a href=\"https://social.isalman.dev/tag/oplog\">#OpLog</a> — Day 2",
    "excerpt": "...",
    "url": "/posts/898fb860-7c0a-4899-89aa-6cfb0301db4e/",
    "originalUrl": "https://social.isalman.dev/objects/898fb860-7c0a-4899-89aa-6cfb0301db4e"
  },
  {
    "id": "c29a2781-a926-4d53-b590-571cc3e9142f",
    "title": "Mastodon solved decentralization. But it still can’t solve private DMs.  They call it “direct mes...",
    "date": "2025-05-06T14:22:38.286Z",
    "content": "Mastodon solved decentralization. But it still can’t solve private DMs.<br /><br />They call it “direct messaging,” but it’s not encrypted. Your instance admin can read everything. That’s not private — that’s just email with extra steps.<br /><br />Why hasn’t E2E encryption been prioritized? Even optional encrypted DMs would show real commitment to privacy.<br /><br />We can do better.<br /><br /><a href=\"https://social.isalman.dev/tag/oplog\">#OpLog</a> — Day 1",
    "excerpt": "...",
    "url": "/posts/c29a2781-a926-4d53-b590-571cc3e9142f/",
    "originalUrl": "https://social.isalman.dev/objects/c29a2781-a926-4d53-b590-571cc3e9142f"
  },
  {
    "id": "1cb4af78-cbbb-4bf7-8683-284db8deef64",
    "title": "👇 no-as-a-service API From: @FlohEinstein  https://chaos.social/@FlohEinstein/114431056473852558",
    "date": "2025-05-06T03:50:39.889Z",
    "content": "👇 no-as-a-service API<br />From: <span><a href=\"https://chaos.social/@FlohEinstein\">@<span>FlohEinstein</span></a></span> <br /><a href=\"https://chaos.social/@FlohEinstein/114431056473852558\">https://chaos.social/@FlohEinstein/114431056473852558</a>",
    "excerpt": "...",
    "url": "/posts/1cb4af78-cbbb-4bf7-8683-284db8deef64/",
    "originalUrl": "https://social.isalman.dev/objects/1cb4af78-cbbb-4bf7-8683-284db8deef64"
  },
  {
    "id": "c4f79e67-0228-4bcf-b02a-23931626b938",
    "title": "Where can I find its GitHub repository? Anybody? From: @hkrn  https://mstdn.social/@hkrn/11445855...",
    "date": "2025-05-06T03:43:51.846Z",
    "content": "Where can I find its GitHub repository? Anybody?<br />From: <span><a href=\"https://mstdn.social/@hkrn\">@<span>hkrn</span></a></span> <br /><a href=\"https://mstdn.social/@hkrn/114458551171150321\">https://mstdn.social/@hkrn/114458551171150321</a>",
    "excerpt": "...",
    "url": "/posts/c4f79e67-0228-4bcf-b02a-23931626b938/",
    "originalUrl": "https://social.isalman.dev/objects/c4f79e67-0228-4bcf-b02a-23931626b938"
  },
  {
    "id": "6106454e-bcfc-4b99-a675-7ca3454c9238",
    "title": "I have a genuine question for Mastodon developers: You’ve built excellent APIs and made it easy f...",
    "date": "2025-05-05T06:43:37.211Z",
    "content": "I have a genuine question for Mastodon developers: You’ve built excellent APIs and made it easy for third-party apps to integrate features like federated post streaming. So why hasn’t this functionality been implemented in the official mobile app, even after years of API development?<br />It feels like a missed opportunity—what’s holding it back?",
    "excerpt": "...",
    "url": "/posts/6106454e-bcfc-4b99-a675-7ca3454c9238/",
    "originalUrl": "https://social.isalman.dev/objects/6106454e-bcfc-4b99-a675-7ca3454c9238"
  }
]